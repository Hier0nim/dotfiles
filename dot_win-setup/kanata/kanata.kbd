(defcfg process-unmapped-keys yes
)
(defsrc
  1    2    3    4    5    6    7    8    9    0   -   =
  q    w    e    r    t    y    u    i    o    p
  a    s    d    f    g    h    j    k    l    ;
  z    x    c    v    b    n    m
  spc
)
(defvar
  tap-time 200
  hold-time 200

  left-hand-keys (
    q w e r t
    a s d f g
    z x c v b
    spc
  )
  right-hand-keys (
    y u i o p
    h j k l ;
    n m , . /
    spc
  )
)
(deflayer base
  1    2    3    4    5    6    7    8    9    0   -   =
  q    w    e    r    t    y    u    i    o    p
  @a   @s   @d   @f   g    h    @j   @k   @l   @;
  z    x    c    v    b    n    m
  @space
)

(deflayer nomods
  1    2    3    4    5    6    7    8    9    0   -   =
  q    w    e    r    t    y    u    i    o    p
  a    s    d    f    g    h    j    k    l    ;
  z    x    c    v    b    n    m
  spc
)
(deffakekeys
  to-base (layer-switch base)
)
(defalias
  tap (multi
    (layer-switch nomods)
    (on-idle-fakekey to-base tap 20)
  )

  a     (tap-hold-release-keys $tap-time $hold-time (multi a @tap) lmet $left-hand-keys)
  s     (tap-hold-release-keys $tap-time $hold-time (multi s @tap) lalt $left-hand-keys)
  d     (tap-hold-release-keys $tap-time $hold-time (multi d @tap) lctl $left-hand-keys)
  f     (tap-hold-release-keys $tap-time $hold-time (multi f @tap) lsft $left-hand-keys)
  j     (tap-hold-release-keys $tap-time $hold-time (multi j @tap) rsft $right-hand-keys)
  k     (tap-hold-release-keys $tap-time $hold-time (multi k @tap) rctl $right-hand-keys)
  l     (tap-hold-release-keys $tap-time $hold-time (multi l @tap) ralt $right-hand-keys)
  ;     (tap-hold-release-keys $tap-time $hold-time (multi ; @tap) rmet $right-hand-keys)
  space (tap-hold-press $tap-time $hold-time (multi spc @tap) (layer-while-held space_layer))
)

(deflayer space_layer
  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10   f11   f12
  _    _    _    _    _    _    home end  comp p
  _    _    _    _    _    lft  down up   rght _
  _    _    _    _    _    bspc del
  XX
)
